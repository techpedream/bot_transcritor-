import streamlit as st
from openai import OpenAI
from docx import Document
import tempfile
import os
from datetime import date
from pathlib import Path
import shutil

# --- Configura√ß√£o da API ---
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
if not OPENAI_API_KEY:
    st.error("‚ö†Ô∏è API Key da OpenAI n√£o encontrada.")
    st.stop()

# Define a vari√°vel de ambiente para garantir compatibilidade com o client
os.environ["OPENAI_API_KEY"] = OPENAI_API_KEY

# Inicializa o client da OpenAI
client = OpenAI()

# --- Parametriza√ß√£o de √°udio ---
from pydub import AudioSegment
from pathlib import Path
import tempfile

SEGUNDO_POR_PARTE = 600  # 10 minutos
TARGET_SR = 16000        # 16 kHz
BITRATE = "48k"          # MP3 leve

ALLOWED_TYPES = ["mp3", "m4a", "wav", "ogg"]

def converter_para_mp3_mono16k(caminho_entrada: str) -> str:
    """Converte qualquer √°udio para MP3, 16 kHz, mono, bitrate baixo."""
    caminho_saida = Path(caminho_entrada).with_suffix("").as_posix() + "_proc.mp3"
    try:
        audio = AudioSegment.from_file(caminho_entrada)
        audio = audio.set_frame_rate(TARGET_SR).set_channels(1)
        audio.export(caminho_saida, format="mp3", bitrate=BITRATE)
        return caminho_saida
    except Exception as e:
        print(f"Erro ao converter √°udio: {e}")
        return None

def duracao_segundos(caminho: str) -> float:
    """Retorna a dura√ß√£o do √°udio em segundos."""
    try:
        audio = AudioSegment.from_file(caminho)
        return len(audio) / 1000  # pydub retorna dura√ß√£o em milissegundos
    except Exception:
        return 0.0

def fatiar_audio(path_mp3: str, segundos_por_parte: int = SEGUNDO_POR_PARTE) -> list:
    """
    Fatia o MP3 em partes de at√© `segundos_por_parte`.
    Retorna lista ordenada com caminhos das partes.
    """
    try:
        audio = AudioSegment.from_file(path_mp3)
        partes = []
        out_dir = Path(tempfile.mkdtemp(prefix="chunks_"))
        total_ms = len(audio)
        step_ms = segundos_por_parte * 1000

        for i, start in enumerate(range(0, total_ms, step_ms)):
            end = min(start + step_ms, total_ms)
            parte_audio = audio[start:end]
            caminho_parte = out_dir / f"parte_{i+1:03d}.mp3"
            parte_audio.export(caminho_parte, format="mp3", bitrate=BITRATE)
            partes.append(str(caminho_parte))

        # Se por algum motivo n√£o segmentou, devolve o original
        if not partes:
            partes = [path_mp3]

        return partes
    except Exception as e:
        print(f"Erro ao fatiar √°udio: {e}")
        return [path_mp3]


# -------- Transcri√ß√£o (Whisper) --------
def transcrever_um_arquivo(caminho_audio: str) -> str:
    """Transcreve um arquivo individual com Whisper-1 e retorna texto."""
    with open(caminho_audio, "rb") as f:
        tr = client.audio.transcriptions.create(
            model="whisper-1",
            file=f
        )
    return tr.text or ""

def transcrever_em_partes(partes: list) -> str:
    """Transcreve cada parte e concatena com separadores claros."""
    textos = []
    for idx, p in enumerate(partes, start=1):
        try:
            texto = transcrever_um_arquivo(p).strip()
            if texto:
                textos.append(f"[PARTE {idx}]\n{texto}")
        except Exception as e:
            st.warning(f"Falha ao transcrever a parte {idx}: {e}")
    return "\n\n".join(textos).strip()

# -------- App --------
st.title("üß† Gerador de Relat√≥rio de Psicoterapia")

audio_file = st.file_uploader("üé§ Envie o √°udio da sess√£o", type=None)
nome_paciente = st.text_input("üßç Nome do Paciente")
idade_paciente = st.text_input("üìÖ Idade do Paciente")
numero_sessao = st.text_input("üî¢ N√∫mero da Sess√£o")
nome_psicologo = st.text_input("üë©‚Äç‚öïÔ∏è Acad√™mico(a)")
nome_supervisor = st.text_input("üßë‚Äçüè´ Supervisor(a)")
data_sessao = st.date_input("üìÖ Data da Sess√£o", value=date.today())

if st.button("üöÄ Gerar Relat√≥rio") and audio_file:
    # 1) Salvar upload
    with st.spinner("Salvando arquivo..."):
        ext = os.path.splitext(audio_file.name)[1].lower()
        with tempfile.NamedTemporaryFile(delete=False, suffix=ext) as tmp:
            tmp.write(audio_file.read())
            original_path = tmp.name

    # 2) Converter p/ MP3 leve (16kHz, mono) ‚Äî reduz risco de 400/timeout
    with st.spinner("Convertendo √°udio (16 kHz, mono, MP3)..."):
        mp3_path = converter_para_mp3_mono16k(original_path)
        if not mp3_path or not os.path.exists(mp3_path):
            st.stop()

    # 3) Fatiar se for longo
    with st.spinner("Verificando dura√ß√£o e fatiando, se necess√°rio..."):
        dur = duracao_segundos(mp3_path)
        if dur > SEGUNDO_POR_PARTE:
            partes = fatiar_audio(mp3_path, SEGUNDO_POR_PARTE)
        else:
            partes = [mp3_path]

    # 4) Transcrever tudo
    with st.spinner("Transcrevendo √°udio... ‚è≥"):
        try:
            texto_transcrito = transcrever_em_partes(partes)
            if not texto_transcrito:
                st.error("Transcri√ß√£o ficou vazia.")
                st.stop()
        except Exception as e:
            st.error(f"Erro na transcri√ß√£o: {e}")
            st.stop()

    # 5) Gerar relat√≥rio com GPT (sem mostrar a transcri√ß√£o na tela)
    with st.spinner("Gerando relat√≥rio com IA... ‚ú®"):
        prompt = f"""
Voc√™ √© um psic√≥logo cl√≠nico com foco em descri√ß√£o comportamental e an√°lise funcional. Gere um relat√≥rio descritivo e operacional a partir da transcri√ß√£o completa da sess√£o abaixo.
Use apenas informa√ß√µes da transcri√ß√£o. N√£o invente dados. N√£o diagnose. Evite termos circulares e ‚Äúfic√ß√µes explicativas‚Äù. Quando a informa√ß√£o n√£o estiver presente, escreva literalmente ‚Äún√£o mencionado‚Äù.

Estilo e regras de escrita

Priorize comportamentos observ√°veis, contexto e consequ√™ncias (ABC).

Atribua estados internos como relatos do paciente: use ‚Äúo paciente relata‚Ä¶‚Äù, ‚Äúrefere‚Ä¶‚Äù.

Evite jarg√µes e termos circulares (ex.: regress√£o, mecanismo de defesa, tra√ßos, personalidade fr√°gil, autoconceito danificado, mente subconsciente).

N√£o nomeie abordagens terap√™uticas ou siglas.

Frases curtas, voz ativa, linguagem clara e espec√≠fica (verbo de a√ß√£o + contexto + frequ√™ncia/dura√ß√£o quando dispon√≠vel).

Hip√≥teses devem ser marcadas como ‚ÄúHip√≥tese de trabalho‚Äù, sempre com evid√™ncias textuais e n√≠vel de confian√ßa (Baixo/Moderado/Alto).

FORMATO DE SA√çDA (obrigat√≥rio)

REGISTRO DOCUMENTAL
Paciente: {nome_paciente}
Idade: {idade_paciente}
Data: {data_sessao.strftime('%d/%m/%Y')} Sess√£o: {numero_sessao}
Acad√™micos: {nome_psicologo}
Supervisor: {nome_supervisor}

1. Relato do paciente (descritivo)

Contextos/Antecedentes (A): [situa√ß√µes, locais, pessoas, eventos ‚Äúantes de‚Äù]

Respostas/Comportamentos (B): [o que fez/disse; frequ√™ncia/intensidade/dura√ß√£o se citadas]

Consequ√™ncias (C): [o que ocorreu depois; rea√ß√µes de outros; efeitos imediatos]

Estados internos relatados: [sentimentos/pensamentos como relatos, n√£o como causas]

Observa√ß√£o: use trechos curtos entre aspas quando relevante.

2. An√°lise descritiva e hip√≥teses de trabalho

Padr√µes observ√°veis: [rela√ß√µes A‚ÜíB‚ÜíC recorrentes; gatilhos relatados]

Vari√°veis contextuais relevantes: [hor√°rio, ambiente, pessoas, condi√ß√µes]

Lacunas de informa√ß√£o: [perguntas objetivas a esclarecer]

Hip√≥teses de trabalho (se houver):

Hip√≥tese: [enunciado operacional, sem r√≥tulos diagn√≥sticos]
Evid√™ncias da transcri√ß√£o: [itens espec√≠ficos]
N√≠vel de confian√ßa: [Baixo/Moderado/Alto]
Alternativas/Falsificadores: [o que mudaria a hip√≥tese]

3. Exame do estado mental (com base no que foi dito)

Estado emocional atual (√∫ltima semana): [descrever / n√£o mencionado]
Estado de sa√∫de atual (√∫ltima semana): [descrever / n√£o mencionado]
Aspectos do paciente na entrevista: [descrever / n√£o mencionado]
Comunica√ß√£o com os estagi√°rios: [descrever / n√£o mencionado]
Sentimentos verbalizados ou demonstrados: [descrever / n√£o mencionado]
Consci√™ncia: [descrever / n√£o mencionado]
Conduta: [descrever / n√£o mencionado]
Linguagem: [descrever / n√£o mencionado]
Pensamento: [descrever / n√£o mencionado]

4. Observa√ß√µes gerais

[observa√ß√µes adicionais objetivas; sem r√≥tulos diagn√≥sticos]

5. Sugest√µes para o pr√≥ximo atendimento (operacionais)

Liste recomenda√ß√µes comportamentais claras, sem citar abordagens:

[A√ß√£o] + [Contexto] + [Frequ√™ncia/Dura√ß√£o] + [Crit√©rio de sucesso].
Ex.: ‚ÄúRegistrar 1 epis√≥dio por dia usando ABC em situa√ß√µes de X, por 7 dias.‚Äù
Ex.: ‚ÄúPraticar 2 minutos de respira√ß√£o diafragma ap√≥s [evento gatilho] por 1 semana.‚Äù
Ex.: ‚ÄúPlanejar 3 atividades prazerosas espec√≠ficas para [dias/hor√°rios], e executar.‚Äù

=== TRANSCRI√á√ÉO COMPLETA ===
{texto_transcrito}
"""
        try:
            resposta = client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[{"role": "user", "content": prompt}]
            )
            texto_relatorio = resposta.choices[0].message.content.strip()
        except Exception as e:
            st.error(f"Erro ao gerar relat√≥rio: {e}")
            st.stop()

    # 6) Montar DOCX: relat√≥rio + transcri√ß√£o completa
    with st.spinner("Gerando DOCX... üìÑ"):
        doc = Document()

        # Relat√≥rio formatado (linha a linha preserva quebras)
        for linha in texto_relatorio.splitlines():
            doc.add_paragraph(linha)

        # P√°gina nova + transcri√ß√£o
        doc.add_page_break()
        doc.add_heading("Transcri√ß√£o Completa", level=1)
        for linha in texto_transcrito.splitlines():
            doc.add_paragraph(linha)

        doc_path = tempfile.NamedTemporaryFile(delete=False, suffix=".docx").name
        doc.save(doc_path)

    with open(doc_path, "rb") as f:
        st.success("‚úÖ Relat√≥rio gerado!")
        st.download_button(
            "üì• Baixar Relat√≥rio",
            f,
            file_name=f"Relatorio_{nome_paciente}.docx"
        )

    # Limpeza b√°sica (opcional)
    try:
        # remove diret√≥rios tempor√°rios usados na segmenta√ß√£o
        for p in Path(tempfile.gettempdir()).glob("chunks_*"):
            if p.is_dir():
                shutil.rmtree(p, ignore_errors=True)
    except Exception:
        pass






